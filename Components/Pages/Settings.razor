@page "/settings"
@using System.Text.Json
@using Calendrier.Services
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation
@inject AppSettingsService AppSettingsService

@if (Message != null)
{
    <div class="alert alert-info mt-2">@Message</div>
}
<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">Settings Folder:</label>
    <div class="col-7 d-flex">
        <input class="form-control " value="@SettingsFilePath" readonly disabled/>
    </div>
    <div class="col-2 d-flex gap-1">
        <button title="Open Folder" type="button" class="btn btn-secondary"
                @onclick="() => OpenFolder(SettingsFolderPath)">
            <SvgIcon Name="folder"/>
        </button>
        <button title="Open File" type="button" class="btn btn-secondary" @onclick="() => OpenFile(SettingsFilePath)">
            <SvgIcon Name="file" />
        </button>
    </div>
</div>
<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">User Data File Location:</label>
    <div class="col-7 d-flex">
        <input class="form-control" value="@OrderDataFilePath" @onchange="OnOrderDataFilePathChanged" />
    </div>
    <div class="col-2 d-flex gap-1">
        <button title="Open Folder" type="button" class="btn btn-secondary"
            @onclick="() => OpenFolder(OrderDataFilePath)">
           <SvgIcon Name="folder"/>
        </button>
        <button title="Open File" type="button" class="btn btn-secondary" @onclick="() => OpenFile(OrderDataFilePath)">
            <SvgIcon Name="file" />
        </button>
    </div>
</div>
<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">Google API Key:</label>
    <div class="col-7 d-flex">
        <input class="form-control" type="@(showGoogleApiKey ? "text" : "password")" value="@GoogleAPIKey"
            @onfocusin="() => showGoogleApiKey = true" @onfocusout="() => showGoogleApiKey = false"
            @onchange="OnGoogleAPIKeyPathChanged" />
    </div>

</div>
<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">Theme:</label>
    <div class="col-9">
        <input type="checkbox" id="dark" name="theme" value="true" checked="@DarkMode" @onchange="OnThemeChanged" />
        <label for="dark" class="ms-2">Dark Mode</label>
    </div>
</div>

<h2 class="mt-4">Home page clock / day / date</h2>

<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">Clock:</label>
    <div class="col-7 d-flex align-items-center">
        <input class="btn-check" type="checkbox" id="clock-visible-btn" autocomplete="off" @bind="ClockVisible" />
        <label class="btn btn-outline-primary me-3" for="clock-visible-btn">Visible</label>

        <select class="form-select w-auto" @bind="ClockFormat" @bind:event="onchange">
            <option value="0">h:mmtt (4:34PM)</option>
            <option value="1">hh:mm tt (04:34 PM)</option>
            <option value="2">H:mm (16:34)</option>
            <option value="3">HH:mm (16:34)</option>
            <option value="4">h:mm:sstt (4:34:05PM)</option>
            <option value="5">hh:mm:ss (04:34:05)</option>
            <option value="6">h:mm (4:34)</option>
            <option value="7">hh:mm (04:34)</option>
            <option value="8">h:mm:ss (4:34:05)</option>
            <option value="9">HH:mm:ss (16:34:05)</option>
        </select>
    </div>
</div>

<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">Date:</label>
    <div class="col-7 d-flex align-items-center">
        <input class="btn-check" type="checkbox" id="date-visible-btn" autocomplete="off" @bind="DateVisible" />
        <label class="btn btn-outline-primary me-3" for="date-visible-btn">Visible</label>

        <select class="form-select w-auto" @bind="DateFormat" @bind:event="onchange">
            <option value="0">Ordinal: 5th of October</option>
            <option value="1">d MMMM (5 October)</option>
            <option value="2">MMMM d, yyyy (October 5, 2025)</option>
            <option value="3">dd/MM/yyyy (05/10/2025)</option>
            <option value="4">MM/dd/yyyy (10/05/2025)</option>
            <option value="5">d MMM (5 Oct)</option>
            <option value="6">yyyy-MM-dd (2025-10-05)</option>
            <option value="7">MMMM yyyy (October 2025)</option>
            <option value="8">d'th' MMMM (5th October) (literal)</option>
            <option value="9">Custom: dd MMM yyyy</option>
        </select>
    </div>
</div>

<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">Weekday:</label>
    <div class="col-7 d-flex align-items-center">
        <input class="btn-check" type="checkbox" id="day-visible-btn" autocomplete="off" @bind="DayVisible" />
        <label class="btn btn-outline-primary me-3" for="day-visible-btn">Visible</label>

        <select class="form-select w-auto" @bind="DayFormat" @bind:event="onchange">
            <option value="0">dddd (Thursday)</option>
            <option value="1">ddd (Thu)</option>
            <option value="2">dddd, MMMM d (Thursday, October 5)</option>
            <option value="3">ddd, MMM d (Thu, Oct 5)</option>
            <option value="4">dddd (all caps)</option>
            <option value="5">ddd (all caps)</option>
            <option value="6">dddd - MMMM (Thursday - October)</option>
            <option value="7">dddd, yyyy (Thursday, 2025)</option>
            <option value="8">dddd � MMM d (Thursday � Oct 5)</option>
            <option value="9">ddd � d (Thu � 5)</option>
        </select>
    </div>
</div>

@code {
    private bool showGoogleApiKey = false;

    private string OrderDataFilePath
    {
        get => AppSettingsService.Settings.OrderDataFilePath;
        set => AppSettingsService.Settings.OrderDataFilePath = value;
    }
    private string GoogleAPIKey
    {
        get => AppSettingsService.Settings.GoogleAPIKey;
        set => AppSettingsService.Settings.GoogleAPIKey = value;
    }
    private bool DarkMode
    {
        get => AppSettingsService.Settings.DarkMode;
        set => AppSettingsService.Settings.DarkMode = value;
    }

    private string SettingsFilePath => AppSettingsService.Settings.SettingsFilePath;
    private string SettingsFolderPath => Path.GetDirectoryName(SettingsFilePath) ?? string.Empty;

    private string? Message;

    private bool ClockVisible
    {
        get => AppSettingsService.Settings.ClockVisible;
        set
        {
            AppSettingsService.Settings.ClockVisible = value;
            _ = SaveSettings();
        }
    }

    private int ClockFormat
    {
        get => AppSettingsService.Settings.ClockFormat;
        set
        {
            AppSettingsService.Settings.ClockFormat = value;
            _ = SaveSettings();
        }
    }

    private bool DayVisible
    {
        get => AppSettingsService.Settings.DayVisible;
        set
        {
            AppSettingsService.Settings.DayVisible = value;
            _ = SaveSettings();
        }
    }

    private int DayFormat
    {
        get => AppSettingsService.Settings.DayFormat;
        set
        {
            AppSettingsService.Settings.DayFormat = value;
            _ = SaveSettings();
        }
    }

    private bool DateVisible
    {
        get => AppSettingsService.Settings.DateVisible;
        set
        {
            AppSettingsService.Settings.DateVisible = value;
            _ = SaveSettings();
        }
    }

    private int DateFormat
    {
        get => AppSettingsService.Settings.DateFormat;
        set
        {
            AppSettingsService.Settings.DateFormat = value;
            _ = SaveSettings();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await AppSettingsService.LoadOrCreateAsync();
        StateHasChanged();
    }

    private async Task SaveSettings()
    {
        await AppSettingsService.SaveAsync();
        Message = "Settings saved!";
        StateHasChanged();
    }

    private async Task OnOrderDataFilePathChanged(ChangeEventArgs e)
    {
        OrderDataFilePath = e.Value?.ToString() ?? OrderDataFilePath;
        await SaveSettings();
    }

    private async Task OnGoogleAPIKeyPathChanged(ChangeEventArgs e)
    {
        GoogleAPIKey = e.Value?.ToString() ?? GoogleAPIKey;
        await SaveSettings();
    }

    private async void OnThemeChanged(ChangeEventArgs e)
    {
        DarkMode = bool.Parse(e.Value?.ToString() ?? "false");
        await SaveSettings();
    }

    private void ToggleGoogleApiKeyVisibility()
    {
        showGoogleApiKey = !showGoogleApiKey;
    }

    private void OpenFolder(string filePath)
    {
#if WINDOWS
var folder = Path.GetDirectoryName(filePath);
if (!string.IsNullOrEmpty(folder))
{
System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
{
FileName = folder,
UseShellExecute = true,
Verb = "open"
});
}
#endif
    }

    private void OpenFile(string filePath)
    {
#if WINDOWS
if (File.Exists(filePath))
{
System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
{
FileName = filePath,
UseShellExecute = true,
Verb = "open"
});
}
#endif
    }

    private async Task OnClockVisibleChanged(ChangeEventArgs e)
    {
        ClockVisible = bool.Parse(e.Value?.ToString() ?? "false");
    }

    private async Task OnDayVisibleChanged(ChangeEventArgs e)
    {
        DayVisible = bool.Parse(e.Value?.ToString() ?? "false");
    }

    private async Task OnDateVisibleChanged(ChangeEventArgs e)
    {
        DateVisible = bool.Parse(e.Value?.ToString() ?? "false");
    }
}