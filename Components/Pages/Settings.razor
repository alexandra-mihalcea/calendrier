@page "/settings"
@using System.Text.Json
@using Calendrier.Services
@inject NavigationManager Navigation
@inject AppSettingsService AppSettingsService

@if (Message != null)
{
    <div class="alert alert-info mt-2">@Message</div>
}

<h1>Settings</h1>

<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">Settings Folder:</label>
    <div class="col-7 d-flex">
        <input class="form-control " value="@SettingsFilePath" readonly disabled/>
    </div>
    <div class="col-2 d-flex gap-1">
        <button title="Open Folder" type="button" class="btn btn-secondary"
                @onclick="() => OpenFolder(SettingsFolderPath)">
            <SvgIcon Name="folder"/>
        </button>
        <button title="Open File" type="button" class="btn btn-secondary" @onclick="() => OpenFile(SettingsFilePath)">
            <SvgIcon Name="file" />
        </button>
    </div>
</div>
<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">User Data File Location:</label>
    <div class="col-7 d-flex">
        <input class="form-control" value="@OrderDataFilePath" @onchange="OnOrderDataFilePathChanged" />
    </div>
    <div class="col-2 d-flex gap-1">
        <button title="Open Folder" type="button" class="btn btn-secondary"
            @onclick="() => OpenFolder(OrderDataFilePath)">
           <SvgIcon Name="folder"/>
        </button>
        <button title="Open File" type="button" class="btn btn-secondary" @onclick="() => OpenFile(OrderDataFilePath)">
            <SvgIcon Name="file" />
        </button>
    </div>
</div>
<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">Google API Key:</label>
    <div class="col-7 d-flex">
        <input class="form-control" type="@(showGoogleApiKey ? "text" : "password")" value="@GoogleAPIKey"
            @onfocusin="() => showGoogleApiKey = true" @onfocusout="() => showGoogleApiKey = false"
            @onchange="OnGoogleAPIKeyPathChanged" />
    </div>

</div>
<div class="mb-3 row align-items-center">
    <label class="col-form-label col-2">Theme:</label>
    <div class="col-9">
        <input type="checkbox" id="dark" name="theme" value="true" checked="@DarkMode" @onchange="OnThemeChanged" />
        <label for="dark" class="ms-2">Dark Mode</label>
    </div>
</div>

@code {
    private bool showGoogleApiKey = false;

    private string OrderDataFilePath
    {
        get => AppSettingsService.Settings.OrderDataFilePath;
        set => AppSettingsService.Settings.OrderDataFilePath = value;
    }
    private string GoogleAPIKey
    {
        get => AppSettingsService.Settings.GoogleAPIKey;
        set => AppSettingsService.Settings.GoogleAPIKey = value;
    }
    private bool DarkMode
    {
        get => AppSettingsService.Settings.DarkMode;
        set => AppSettingsService.Settings.DarkMode = value;
    }

    private string SettingsFilePath => AppSettingsService.Settings.SettingsFilePath;
    private string SettingsFolderPath => Path.GetDirectoryName(SettingsFilePath) ?? string.Empty;

    private string? Message;

    protected override async Task OnInitializedAsync()
    {
        await AppSettingsService.LoadOrCreateAsync();
        StateHasChanged();
    }

    private async Task SaveSettings()
    {
        await AppSettingsService.SaveAsync();
        Message = "Settings saved!";
        StateHasChanged();
    }

    private async Task OnOrderDataFilePathChanged(ChangeEventArgs e)
    {
        OrderDataFilePath = e.Value?.ToString() ?? OrderDataFilePath;
        await SaveSettings();
    }

    private async Task OnGoogleAPIKeyPathChanged(ChangeEventArgs e)
    {
        GoogleAPIKey = e.Value?.ToString() ?? GoogleAPIKey;
        await SaveSettings();
    }

    private async void OnThemeChanged(ChangeEventArgs e)
    {
        DarkMode = bool.Parse(e.Value?.ToString() ?? "false");
        await SaveSettings();
    }

    private void ToggleGoogleApiKeyVisibility()
    {
        showGoogleApiKey = !showGoogleApiKey;
    }

    private void OpenFolder(string filePath)
    {
#if WINDOWS
var folder = Path.GetDirectoryName(filePath);
if (!string.IsNullOrEmpty(folder))
{
System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
{
FileName = folder,
UseShellExecute = true,
Verb = "open"
});
}
#endif
    }

    private void OpenFile(string filePath)
    {
#if WINDOWS
if (File.Exists(filePath))
{
System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
{
FileName = filePath,
UseShellExecute = true,
Verb = "open"
});
}
#endif
    }
}